---
title: "DataExploration"
format: html
editor: visual
---

Raw Plots of All Variables Used are found in "RawData/RawPlots"

Plotted before and after filling to confirm any weird issues from filling

```{r}
library(dplyr)
library(lubridate)
library(ggplot2)
library(readxl)
library(tidyr)
library(zoo)
library(forecast)
library(tseries)
library(stargazer)
library(plm)
library(broom)
DATA <- read.csv("CleanData/DATA.csv")

# Load all custom functions
r_files <- list.files(path = 'Functions', pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
```

```{r}
# Add Date column
DATA <- DATA %>%
  mutate(Date = ymd(paste(Year, Month, "01", sep = "-")))

DATA <- DATA %>% filter(Country != "NA") # Some 2023 dates from world variables were causing na country rows. We could more carefully filter to 2022 or simply drop na here. Since we want all data in the price plots, it is easier to drop na country here. 

# List of columns to plot (excluding non-numeric and key columns)
columns_to_plot <- colnames(DATA)[!(colnames(DATA) %in% c("X", "key", "key1", "Year", "Month", "Country", "Date"))]

# Loop through each column and create a plot
for (column_name in columns_to_plot) {
  p <- ggplot(DATA, aes_string(x = "Date", y = column_name, color = 'Country')) + 
    geom_point() + 
    labs(title = paste(column_name ),
         x = "Date",
         y = column_name) + 
    facet_wrap("Country")
  
  # Save the plot
  ggsave(filename = paste0("RawData/RawPlots/", column_name, ".png"), plot = p)
}
```



Plotting Filled Data

```{r}
DATA_Fill <- DATA %>% 
  select(-c(key1, X, Year, Month)) %>%
  separate(key, into = c("Year", "Month", "Country"), sep = "-", remove = FALSE) %>% 
  group_by(Country) %>%
  arrange(Year, Month) %>%
  group_modify(~ interpolate_and_fill(.x)) %>%
  ungroup() %>%
  mutate(Date = ymd(paste(Year, Month, "01", sep = "-")))

# List of columns to plot (excluding non-numeric and key columns)
columns_to_plot <- colnames(DATA_Fill)[!(colnames(DATA_Fill) %in% c("X", "key", "key1", "Year", "Month", "Country", "Date"))]

# Loop through each column and create a plot
for (column_name in columns_to_plot) {
  p <- ggplot(DATA_Fill, aes_string(x = "Date", y = column_name, color = 'Country')) + 
    geom_point() + 
    labs(title = paste0(column_name, 'filled'),
         x = "Date",
         y = paste0(column_name, 'filled')) + 
    facet_wrap("Country")
  
  # Save the plot
  ggsave(filename = paste0("RawData/RawPlots/", column_name, " filled", ".png"), plot = p)
}
```


```{r}
DATA_Fill %>% 
  mutate(ym = paste0(Year, Month)) %>%
  select(c(Country, ym, WorldUrea)) %>% 
  pivot_wider(names_from = Country, values_from = WorldUrea)
```
A note about the plots. If you look at WorldUrea and WorldUreaFilled ,you will see at the end of hte sample they look quite different. This is becasue there is some country Tanzania that we have fertilizer data for through 2023/2024, that creates a lot of na's for other countries during those time periods, and in the join, the world variables fill as na's for those countries. In short, it is caused by differing lengths of some variable across countries and then joins with the 'world' variables. If this is an issue, just filter the dataframe to the timeframe of the study and it will look fine.  


# Summary Stats

```{r}
DATA <- read.csv("CleanData/DATA.csv") %>% 
  select(-c( X, Year, Month)) %>%
  separate(key, into = c("Year", "Month", "Country"), sep = "-", remove = FALSE) %>% 
  group_by(Country) %>%
  arrange(Country, as.numeric(Year), as.numeric(Month)) %>% 
  mutate(Urea = na.approx(Urea, na.rm = FALSE),
         NPK = na.approx(NPK, na.rm = FALSE),
         Diammonium.Phosphate = na.approx(Diammonium.Phosphate, na.rm = FALSE)) %>%
  filter(Year >= 2010 & Year <= 2023) %>%
  drop_na(Urea)

```



```{r}
summary_stats <- DATA %>% 
  separate(key, into = c("Year", "Month", "Country"), sep = "-", convert = TRUE, remove = FALSE) %>%
  group_by(Country) %>%  
  select(-c( key, Year, Month)) %>%
  mutate(UreaUSD = Urea/ExchangeRate) %>% 
  summarise(
    across(everything(), list(
      mean = ~ mean(., na.rm = TRUE),
      #median = ~ median(., na.rm = TRUE),
      sd = ~ sd(., na.rm = TRUE) #,
      #min = ~ min(., na.rm = TRUE),
      #max = ~ max(., na.rm = TRUE),
      #n = ~ sum(!is.na(.))
    ))
  ) %>%
  pivot_longer(cols = -Country, names_to = c("variable", ".value"), names_sep = "_") %>% 
  pivot_wider(names_from = Country, values_from = c(mean, sd))

write.csv(summary_stats, file = 'summary_stats.csv')
```

